{"version":3,"sources":["firebase.js","axios.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","storage","instance","axios","create","baseURL","Post","forwardRef","ref","user","username","postId","imageUrl","caption","useState","comments","setComments","comment","setComment","data","post_id","fetchComments","a","get","then","response","console","log","useEffect","Pusher","cluster","subscribe","bind","className","Avatar","alt","src","map","type","placeholder","value","onChange","e","target","disabled","onClick","preventDefault","post","displayName","ImageUpload","image","setImage","setUrl","progress","setProgress","setCaption","max","Input","files","Button","name","put","on","snapshot","Math","round","bytesTransferred","totalBytes","error","child","getDownloadURL","url","getModalStyle","height","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","setUsername","email","setEmail","password","setPassword","setUser","open","setOpen","registerOpen","setRegisterOpen","unsubscribe","onAuthStateChanged","authUser","updateProfile","fetchPosts","Modal","onClose","style","signInWithEmailAndPassword","catch","alert","message","createUserWithEmailAndPassword","signOut","key","_id","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a816a28e.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyBucH7Kzm8Ds5CbuUs8uQJlzTPh3eZcTzA\",\n  authDomain: \"instagram-clone-23884.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-23884.firebaseio.com\",\n  projectId: \"instagram-clone-23884\",\n  storageBucket: \"instagram-clone-23884.appspot.com\",\n  messagingSenderId: \"671034896143\",\n  appId: \"1:671034896143:web:3aceafdf2319c9f1fc587a\",\n});\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\nexport { db, auth, storage };\n","import axios from \"axios\";\n\nconst instance=axios.create({\n    baseURL: \"http://localhost:8000\"\n});\n\nexport default instance;","import React, { useState, useEffect, forwardRef } from \"react\";\nimport \"./Post.css\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { db } from \"./firebase\";\nimport firebase from \"firebase\";\nimport axios from './axios';\nimport Pusher from \"pusher-js\"\n\nconst Post = forwardRef(\n  ({ user, username, postId, imageUrl, caption }, ref) => {\n    const [comments, setComments] = useState([]);\n    const [comment, setComment] = useState(\"\");\n\n    const postComment = (e) => {\n      e.preventDefault();\n\n      axios.post(\"/comment\",{\n        comment: comment,\n        user: user.displayName,\n        post_id: postId\n      });\n      setComment(\"\");\n    };\n\n    const data={post_id:postId};\n    const fetchComments = async() =>\n    await axios.get('/syncComment',{\"params\":data}).then(response => {\n      console.log(\"Comments are >>>>>\",response);\n      setComments(response.data);\n    });\n  \n    useEffect(() => {\n      var pusher = new Pusher('cccdc78c6de2ce551133', {\n        cluster: 'ap2'\n      });\n  \n      var channel = pusher.subscribe('posts');\n      channel.bind('updated', function(data) {\n        fetchComments();\n      });\n    })\n\n    useEffect(() => {\n      fetchComments();\n    }, []);\n\n    return (\n      <div className=\"post\" ref={ref}>\n        <div className=\"post__header\">\n          <Avatar\n            className=\"post__avatar\"\n            alt={username}\n            src=\"/static/images/avatar/1.jpg\"\n          />\n          <h3>{username}</h3>\n        </div>\n\n        <img className=\"post__image\" src={imageUrl} alt=\"post\" />\n        <h4 className=\"post__text\">\n          {username} <span className=\"post__caption\">{caption}</span>\n        </h4>\n\n        <div className=\"post__comments\">\n          {comments.map((comment) => (\n            <p>\n              <b>{comment.user}</b> {comment.comment}\n            </p>\n          ))}\n        </div>\n\n        {user && (\n          <form className=\"post__commentBox\">\n            <input\n              className=\"post__input\"\n              type=\"text\"\n              placeholder=\"Add a comment...\"\n              value={comment}\n              onChange={(e) => setComment(e.target.value)}\n            />\n            <button\n              disabled={!comment}\n              className=\"post__button\"\n              type=\"submit\"\n              onClick={postComment}\n            >\n              Post\n            </button>\n          </form>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default Post;\n","import React, { useState } from \"react\";\nimport firebase from \"firebase\";\nimport { storage, db } from \"./firebase\";\nimport \"./ImageUpload.css\";\nimport { Input, Button } from \"@material-ui/core\";\n// import axios  from './axios';\nimport axios from './axios'\n\nconst ImageUpload = ({ username }) => {\n  const [image, setImage] = useState(null);\n  const [url, setUrl] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [caption, setCaption] = useState(\"\");\n\n  const handleChange = (e) => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  };\n\n  const handleUpload = () => {\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on(\n      \"state_changed\",\n      (snapshot) => {\n        // progress function ...\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n        setProgress(progress);\n      },\n      (error) => {\n        // Error function ...\n        console.log(error);\n      },\n      () => {\n        // complete function ...\n        storage\n          .ref(\"images\")\n          .child(image.name)\n          .getDownloadURL()\n          .then((url) => {\n            setUrl(url);\n\n            axios.post('/upload',{\n              caption: caption,\n              user: username,\n              image: url\n            });\n\n            // post image inside db\n            // db.collection(\"posts\").add({\n            //   imageUrl: url,\n            //   caption: caption,\n            //   username: username,\n            //   timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n            // });\n\n            setProgress(0);\n            setCaption(\"\");\n            setImage(null);\n          });\n      }\n    );\n  };\n\n  return (\n    <div className=\"imageupload\">\n      <progress className=\"imageupload__progress\" value={progress} max=\"100\" />\n      <Input\n        placeholder=\"Enter a caption\"\n        value={caption}\n        onChange={(e) => setCaption(e.target.value)}\n      />\n      <div>\n        <input type=\"file\" onChange={handleChange} />\n        <Button className=\"imageupload__button\" onClick={handleUpload}>\n          Upload\n        </Button>\n      </div>\n\n      <br />\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./Post\";\nimport ImageUpload from \"./ImageUpload\";\nimport { db, auth } from \"./firebase\";\nimport { Button, Avatar, makeStyles, Modal, Input } from \"@material-ui/core\";\nimport FlipMove from \"react-flip-move\";\nimport InstagramEmbed from \"react-instagram-embed\";\nimport axios from \"./axios\";\nimport  Pusher from \"pusher-js\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    height: \"300px\",\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    height: 200,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [registerOpen, setRegisterOpen] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // user is logged in...\n        console.log(authUser);\n        setUser(authUser);\n\n        if (authUser.displayName) {\n          // dont update username\n        } else {\n          return authUser.updateProfile({\n            displayName: username,\n          });\n        }\n      } else {\n        setUser(null);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  const fetchPosts = async() =>\n  await axios.get('/sync').then(response => {\n    setPosts(response.data);\n  });\n\n  useEffect(() => {\n    var pusher = new Pusher('cccdc78c6de2ce551133', {\n      cluster: 'ap2'\n    });\n\n    var channel = pusher.subscribe('posts');\n    channel.bind('inserted', function(data) {\n      fetchPosts();\n    });\n  })\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  console.log('posts are >>>',posts)\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setOpen(false);\n  };\n\n  const handleRegister = (e) => {\n    e.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setRegisterOpen(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__login\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                alt=\"\"\n              />\n            </center>\n\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button onClick={handleLogin}>Login</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal open={registerOpen} onClose={() => setRegisterOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__login\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                alt=\"\"\n              />\n            </center>\n            <Input\n              type=\"text\"\n              placeholder=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button onClick={handleRegister}>Register</Button>\n          </form>\n        </div>\n      </Modal>\n      <div className=\"app__header\">\n        <img\n          className=\"app__headerImage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"\"\n        />\n        {user?.displayName ? (\n          <div className=\"app__headerRight\">\n            <Button onClick={() => auth.signOut()}>Logout</Button>\n            <Avatar\n              className=\"app__headerAvatar\"\n              alt={user.displayName}\n              src=\"/static/images/avatar/1.jpg\"\n            />\n          </div>\n        ) : (\n          <form className=\"app__loginHome\">\n            <Button onClick={() => setOpen(true)}>Login</Button>\n            <Button onClick={() => setRegisterOpen(true)}>Sign Up</Button>\n          </form>\n        )}\n      </div>\n\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          <FlipMove>\n            {posts.map((post) => (\n              <Post\n                user={user}\n                key={post._id}\n                postId={post._id}\n                username={post.user}\n                caption={post.caption}\n                imageUrl={post.image}\n              />\n            ))}\n          </FlipMove>\n        </div>\n        <div className=\"app__postsRight\">\n          <InstagramEmbed\n            url=\"https://www.instagram.com/p/B_uf9dmAGPw/\"\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName=\"div\"\n            protocol=\"\"\n            injectScript\n            onLoading={() => {}}\n            onSuccess={() => {}}\n            onAfterRender={() => {}}\n            onFailure={() => {}}\n          />\n        </div>\n      </div>\n\n      {user?.displayName ? (\n        <div className=\"app__upload\">\n          <ImageUpload username={user.displayName} />\n        </div>\n      ) : (\n        <center>\n          <h3>Login to upload</h3>\n        </center>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}